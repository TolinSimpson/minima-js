import{createElement}from './minima-core.js';import{sanitizeText}from './minima-template.js';const CHILDREN='children';const KEY='key';const isServer=typeof window==='undefined';const serializeAttrs=(props)=>{if(!props||typeof props!=='object')return '';let result='';for(const key in props){if(key===CHILDREN||key===KEY)continue;const value=props[key];if(key.startsWith('on')&&typeof value==='function')continue;if(value===true)result+=` ${key}`;else if(value!==false&&value!=null)result+=` ${key}="${sanitizeText(String(value))}"`;}return result;};const VOID_ELEMENTS=new Set(['area','base','br','col','embed','hr','img','input','link','meta','source','track','wbr']);const vnodeToString=(vnode)=>{if(vnode==null||vnode===false)return '';if(typeof vnode==='string'||typeof vnode==='number')return sanitizeText(String(vnode));if(Array.isArray(vnode))return vnode.map(vnodeToString).join('');if(typeof vnode==='function')return vnodeToString(vnode({}));if(!vnode.type)return '';if(typeof vnode.type==='function')return vnodeToString(vnode.type(vnode.props||{}));const tag=vnode.type,attrs=serializeAttrs(vnode.props||{});const children=vnode.props?.[CHILDREN]||[];if(VOID_ELEMENTS.has(tag))return `<${tag}${attrs}/>`;const childrenHTML=Array.isArray(children)?children.map(vnodeToString).join(''):vnodeToString(children);return `<${tag}${attrs}>${childrenHTML}</${tag}>`;};const renderToString=(component,props={})=>{if(typeof component==='function')return vnodeToString(component(props));if(component?.type)return vnodeToString(component);throw new Error('renderToString:Invalid component');};const hydrate=(component,container,serverHTML)=>{if(isServer)return console.warn('hydrate()called in server environment');const originalHTML=container.innerHTML;try{container.setAttribute('data-minima-hydrating','true');const vnode=typeof component==='function'?component({}):component;const clientNormalized=normalizeHTML(vnodeToString(vnode));const serverNormalized=normalizeHTML(serverHTML||originalHTML);if(serverNormalized!==clientNormalized){console.warn('Hydration mismatch detected,falling back to client render');container.innerHTML='';hydrateClientOnly(vnode,container);}else{hydrateInteractive(container);}}catch(error){console.error('Hydration error:',error);container.innerHTML='';hydrateClientOnly(typeof component==='function'?component({}):component,container);}finally{container.removeAttribute('data-minima-hydrating');}};const normalizeHTML=(html)=>html.replace(/>\s+</g,'>\n<').replace(/^\s+/,'').replace(/\s+$/,'').replace(/=['"]\s+/g,'="').replace(/\s+['"]/g,'"').toLowerCase();const hydrateClientOnly=(vnode,container)=>{import('./minima-core.js').then(({render})=>{render(vnode,container);});};const hydrateInteractive=(container)=>{container.querySelectorAll('[data-minima-events]').forEach(element=>{try{const events=JSON.parse(element.getAttribute('data-minima-events'));Object.keys(events).forEach(eventType=>{const handler=window[events[eventType]];if(typeof handler==='function')element.addEventListener(eventType,handler);});}catch(e){console.warn('Failed to parse event data:',element.getAttribute('data-minima-events'));}});};const preloadComponent=async(componentPath)=>{try{if(isServer){const module=await import(componentPath);return module.default||module;}const response=await fetch(componentPath);const blob=new Blob([await response.text()],{type:'application/javascript'});const url=URL.createObjectURL(blob);const module=await import(url);URL.revokeObjectURL(url);return module.default||module;}catch(error){console.error('Failed to preload component:',componentPath,error);return null;}};const ssrData=(key,fetcher)=>{if(isServer)return fetcher();const ssrDataElement=document.querySelector(`script[data-ssr-key="${key}"]`);if(ssrDataElement){try{return JSON.parse(ssrDataElement.textContent);}catch(e){console.warn('Failed to parse SSR data for key:',key);}}return fetcher();};const injectSSRData=(html,dataMap)=>{const scripts=Object.keys(dataMap).map(key=>`<script type="application/json" data-ssr-key="${key}">${JSON.stringify(dataMap[key])}</script>`).join('');return html.replace('</body>',`${scripts}</body>`);};export{renderToString,hydrate,preloadComponent,ssrData,injectSSRData};
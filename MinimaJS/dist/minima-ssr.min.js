import {createElement} from './minima-core.js';import {sanitizeText} from './minima-template.js';const isServer=typeof window==='undefined';const serializeAttrs=(props)=> {const attrs=[];Object.keys(props).forEach(key=> {if(key==='children'||key==='key')return;const value=props[key];if(key.startsWith('on')&&typeof value==='function'){return;} if(value===true){attrs.push(key);} else if(value !==false&&value !=null){attrs.push(`${key}="${sanitizeText(String(value))}"`);}});return attrs.length > 0?` ${attrs.join(' ')}`:'';};const VOID_ELEMENTS=new Set(['area','base','br','col','embed','hr','img','input','link','meta','source','track','wbr']);const vnodeToString=(vnode)=> {if(vnode==null||vnode===false)return '';if(typeof vnode==='string'||typeof vnode==='number'){return sanitizeText(String(vnode));} if(Array.isArray(vnode)){return vnode.map(vnodeToString).join('');} if(typeof vnode==='function'){return vnodeToString(vnode({}));} if(!vnode.type)return '';if(typeof vnode.type==='function'){const rendered=vnode.type(vnode.props||{});return vnodeToString(rendered);} const tag=vnode.type;const attrs=serializeAttrs(vnode.props||{});const children=vnode.props?.children||[];if(VOID_ELEMENTS.has(tag)){return `<${tag}${attrs}/>`;} const childrenHTML=Array.isArray(children)?children.map(vnodeToString).join(''):vnodeToString(children);return `<${tag}${attrs}>${childrenHTML}</${tag}>`;};const renderToString=(component,props={})=> {if(typeof component==='function'){const vnode=component(props);return vnodeToString(vnode);} if(component&&component.type){return vnodeToString(component);} throw new Error('renderToString:Invalid component');};const hydrate=(component,container,serverHTML)=> {if(isServer){console.warn('hydrate()called in server environment');return;} const originalHTML=container.innerHTML;try {container.setAttribute('data-minima-hydrating','true');const vnode=typeof component==='function'?component({}):component;const clientHTML=vnodeToString(vnode);const serverNormalized=normalizeHTML(serverHTML||originalHTML);const clientNormalized=normalizeHTML(clientHTML);if(serverNormalized !==clientNormalized){console.warn('Hydration mismatch detected,falling back to client render');container.innerHTML='';hydrateClientOnly(vnode,container);} else {hydrateInteractive(container);}} catch(error){console.error('Hydration error:',error);container.innerHTML='';hydrateClientOnly(typeof component==='function'?component({}):component,container);} finally {container.removeAttribute('data-minima-hydrating');}};const normalizeHTML=(html)=> {return html .replace(/>\s+</g,'><').replace(/^\s+|\s+$/g,'').toLowerCase();};const hydrateClientOnly=(vnode,container)=> {import('./minima-core.js').then(({render})=> {render(vnode,container);});};const hydrateInteractive=(container)=> {const elements=container.querySelectorAll('[data-minima-events]');elements.forEach(element=> {const eventData=element.getAttribute('data-minima-events');try {const events=JSON.parse(eventData);Object.keys(events).forEach(eventType=> {const handlerName=events[eventType];if(window[handlerName]&&typeof window[handlerName]==='function'){element.addEventListener(eventType,window[handlerName]);}});} catch(e){console.warn('Failed to parse event data:',eventData);}});};const preloadComponent=async(componentPath)=> {if(isServer){try {const module=await import(componentPath);return module.default||module;} catch(error){console.error('Failed to preload component:',componentPath,error);return null;}} else {try {const response=await fetch(componentPath);const code=await response.text();const blob=new Blob([code],{type:'application/javascript'});const url=URL.createObjectURL(blob);const module=await import(url);URL.revokeObjectURL(url);return module.default||module;} catch(error){console.error('Failed to preload component:',componentPath,error);return null;}}};const ssrData=(key,fetcher)=> {if(isServer){return fetcher();} else {const ssrDataElement=document.querySelector(`script[data-ssr-key="${key}"]`);if(ssrDataElement){try {return JSON.parse(ssrDataElement.textContent);} catch(e){console.warn('Failed to parse SSR data for key:',key);}} return fetcher();}};const injectSSRData=(html,dataMap)=> {let scripts='';Object.keys(dataMap).forEach(key=> {const data=JSON.stringify(dataMap[key]);scripts +=`<script type="application/json" data-ssr-key="${key}">${data}</script>`;});return html.replace('</body>',`${scripts}</body>`);};export {renderToString,hydrate,preloadComponent,ssrData,injectSSRData};
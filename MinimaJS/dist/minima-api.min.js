import {createElement,useState,useEffect,useMemo,useCallback,useTransition,useDeferredValue,useResource,Suspense,render as coreRender} from './minima-core.js';import {html} from './minima-template.js';import {defineComponent} from './minima-component.js';const h=createElement;const div=(...args)=> h('div',...args);const span=(...args)=> h('span',...args);const p=(...args)=> h('p',...args);const button=(...args)=> h('button',...args);const input=(...args)=> h('input',...args);const a=(...args)=> h('a',...args);const img=(...args)=> h('img',...args);const form=(...args)=> h('form',...args);const ul=(...args)=> h('ul',...args);const li=(...args)=> h('li',...args);const h1=(...args)=> h('h1',...args);const h2=(...args)=> h('h2',...args);const h3=(...args)=> h('h3',...args);const component=defineComponent;const fc=(render)=>()=> render();const shallowEqual=(a,b)=> {if(a===b)return true;if(!a||!b||typeof a !=='object'||typeof b !=='object')return false;const keysA=Object.keys(a);const keysB=Object.keys(b);if(keysA.length !==keysB.length)return false;return keysA.every(key=> a[key]===b[key]);};const memo=(Component)=> {let lastProps=null;let lastResult=null;return(props)=> {if(!lastProps||!shallowEqual(props,lastProps)){lastResult=h(Component,props);lastProps=props;} return lastResult;};};const t=html;const css=(strings,...values)=> {let result=strings[0];for(let i=1;i < strings.length;i++){result +=values[i - 1]+ strings[i];} return result;};const render=(component,target)=> {const container=typeof target==='string'?document.getElementById(target):target;return coreRender(component,container);};const mount=render;const app=(component,target='app')=> render(component,target);const click=(handler)=>({onClick:handler});const submit=(handler)=>({onSubmit:handler});const change=(handler)=>({onChange:handler});const inputEvent=(handler)=>({onInput:handler});const style=(styles)=>({style:styles});const className=(classes)=>({className:classes});const id=(idValue)=>({id:idValue});const when=(condition,component)=> condition?component:null;const unless=(condition,component)=> !condition?component:null;const each=(items,renderFn)=> items.map((item,index)=> renderFn(item,index));const props=(...objects)=> Object.assign({},...objects);const attr=(name,value)=>({[name]:value});const onMount=(fn)=> useEffect(fn,[]);const onUpdate=(fn,deps)=> useEffect(fn,deps);const onDestroy=(fn)=> useEffect(()=> fn,[]);const toggle=(initialValue=false)=> {const[value,setValue]=useState(initialValue);return[value,()=> setValue(!value)];};const counter=(initialValue=0)=> {const[count,setCount]=useState(initialValue);return[count,()=> setCount(count + 1),()=> setCount(count - 1),(value)=> setCount(value)];};const inputState=(initialValue='')=> {const[value,setValue]=useState(initialValue);return[value,setValue,(e)=> setValue(e.target.value)];};const formState=(initialValues={})=> {const[values,setValues]=useState(initialValues);const update=(field)=>(e)=> {setValues({...values,[field]:e.target.value});};const reset=()=> setValues(initialValues);return[values,update,reset];};const fade=(show,duration=300)=>({style:{opacity:show?1:0,transition:`opacity ${duration}ms ease`}});const slide=(show,duration=300)=>({style:{maxHeight:show?'1000px':'0',overflow:'hidden',transition:`max-height ${duration}ms ease`}});const route=(path,component)=> {const currentPath=window.location.hash.slice(1)||'/';return currentPath===path?component:null;};const link=(to,children,props={})=> h('a',{...props,href:`#${to}`,onClick:(e)=> {e.preventDefault();window.location.hash=to;}},children);const context=(initialValue)=> {let value=initialValue;const listeners=new Set();const Provider=({value:newValue,children})=> {if(newValue !==value){value=newValue;listeners.forEach(fn=> fn(value));} return children;};const use=()=> {const[currentState,setState]=useState(value);useEffect(()=> {const updateState=(newValue)=> setState(newValue);listeners.add(updateState);return()=> listeners.delete(updateState);},[]);return currentState;};const Consumer=({children})=> {const contextValue=use();if(typeof children==='function'){return children(contextValue);} return children;};return {Provider,Consumer,use};};const createContext=(defaultValue)=> {return context(defaultValue);};const ErrorBoundary=(fallback=null)=> {const[error,setError]=useState(null);useEffect(()=> {const handleError=(event)=> {setError(event.error||event.reason);};window.addEventListener('error',handleError);window.addEventListener('unhandledrejection',handleError);return()=> {window.removeEventListener('error',handleError);window.removeEventListener('unhandledrejection',handleError);};},[]);if(error){if(typeof fallback==='function'){return fallback(error);} return div({className:'error-boundary'},[h2('Something went wrong'),p(error.message||'An unexpected error occurred'),button({onClick:()=> setError(null)},'Try again')]);} return null;};const debug=(component)=> {console.log('Component render:',component);return component;};const log=(value,label='Debug')=> {console.log(`${label}:`,value);return value;};const api={createElement,useState,useEffect,useMemo,useCallback,useTransition,useDeferredValue,useResource,Suspense,render:coreRender,html,defineComponent,h,div,span,p,button,input,a,img,form,ul,li,h1,h2,h3,useState,useEffect,useMemo,useCallback,useTransition,useDeferredValue,useResource,Suspense,component,fc,memo,t,css,render,mount,app,click,submit,change,input,style,className,id,props,attr,when,unless,each,onMount,onUpdate,onDestroy,toggle,counter,inputState,formState,fade,slide,route,link,context,createContext,ErrorBoundary,debug,log};export {createElement,useState,useEffect,useMemo,useCallback,useTransition,useDeferredValue,useResource,Suspense,render,html,defineComponent,h,div,span,p,button,input,a,img,form,ul,li,h1,h2,h3,useState,useEffect,useMemo,useCallback,useTransition,useDeferredValue,useResource,Suspense,component,fc,memo,t,css,mount,app,click,submit,change,inputEvent,style,className,id,when,unless,each,props,attr,onMount,onUpdate,onDestroy,toggle,counter,inputState,formState,fade,slide,route,link,context,createContext,ErrorBoundary,debug,log};export default api;
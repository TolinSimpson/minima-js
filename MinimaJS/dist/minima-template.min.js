import {createElement} from './minima-core.js';const DANGEROUS_TAGS=new Set(['script','iframe','object','embed','applet','meta','link','style']);const DANGEROUS_ATTRS=new Set(['onload','onerror','onclick','onmouseover','onfocus','onblur']);const URL_ATTRS=new Set(['href','src','action','formaction','data','background']);const sanitizeText=(text)=> {if(typeof text !=='string')return String(text);return text .replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#x27;').replace(/\};const isValidUrl=(url)=> {if(typeof url !=='string')return false;const trimmed=url.trim().toLowerCase();return !trimmed.startsWith('javascript:')&&!trimmed.startsWith('data:')&&!trimmed.startsWith('vbscript:')&&!trimmed.includes('javascript:');};const sanitizeAttr=(name,value)=> {if(DANGEROUS_ATTRS.has(name.toLowerCase()))return null;if(URL_ATTRS.has(name.toLowerCase())&&!isValidUrl(value))return null;if(typeof value==='string'){return value.replace(/"/g,'&quot;').replace(/'/g,'&#x27;');} return value;};const parseHTML=(html)=> {const tokens=[];let i=0;while(i < html.length){if(html[i]==='<'){const tagEnd=html.indexOf('>',i);if(tagEnd===-1)break;const tagContent=html.slice(i + 1,tagEnd);const isClosing=tagContent.startsWith('/');const tagName=(isClosing?tagContent.slice(1):tagContent).split(/\s/)[0].toLowerCase();if(isClosing){tokens.push({type:'close',tag:tagName});} else {const attrs=parseAttrs(tagContent.slice(tagName.length));tokens.push({type:'open',tag:tagName,attrs,self:tagContent.endsWith('/')});} i=tagEnd + 1;} else {const nextTag=html.indexOf('<',i);const text=html.slice(i,nextTag===-1?html.length:nextTag).trim();if(text)tokens.push({type:'text',content:text});i=nextTag===-1?html.length:nextTag;}} return tokens;};const parseAttrs=(attrStr)=> {const attrs={};const regex=/(\w+)(?:=["']([^"']*?)["'])?/g;let match;while((match=regex.exec(attrStr))!==null){const[,name,value='']=match;const sanitized=sanitizeAttr(name,value);if(sanitized !==null)attrs[name]=sanitized;} return attrs;};const tokensToVNode=(tokens)=> {const stack=[{children:[]}];tokens.forEach(token=> {const current=stack[stack.length - 1];switch(token.type){case 'text':current.children.push(sanitizeText(token.content));break;case 'open':if(DANGEROUS_TAGS.has(token.tag))break;const element={type:token.tag,props:{...token.attrs},children:[]};current.children.push(element);if(!token.self)stack.push(element);break;case 'close':if(stack.length > 1&&!DANGEROUS_TAGS.has(token.tag)){stack.pop();} break;}});return stack[0].children;};const html=(strings,...values)=> {let result='';for(let i=0;i < strings.length;i++){result +=strings[i];if(i < values.length){const value=values[i];if(typeof value==='function'){result +=`__HANDLER_${i}__`;} else if(Array.isArray(value)){result +=value.map(v=> typeof v==='string'?sanitizeText(v):'__VNODE__').join('');} else {result +=sanitizeText(value);}}} const tokens=parseHTML(result);const vnodes=tokensToVNode(tokens);let handlerIndex=0;const processVNode=(vnode)=> {if(typeof vnode==='string'){return vnode.replace(/__HANDLER_(\d+)__/g,(match,idx)=> {const handler=values[parseInt(idx)];if(typeof handler==='function'){handlerIndex++;return `data-handler-${handlerIndex}`;} return match;});} if(vnode.type&&vnode.props){Object.keys(vnode.props).forEach(key=> {if(typeof vnode.props[key]==='string'&&vnode.props[key].includes('__HANDLER_')){const handlerIdx=parseInt(vnode.props[key].match(/__HANDLER_(\d+)__/)?.[1]);if(handlerIdx !==undefined&&values[handlerIdx]){const eventName=key.startsWith('on')?key:`on${key}`;delete vnode.props[key];vnode.props[eventName]=values[handlerIdx];}}});if(vnode.children){vnode.children=vnode.children.map(processVNode).filter(Boolean);vnode.props.children=vnode.children;} return createElement(vnode.type,vnode.props,...vnode.children);} return vnode;};if(vnodes.length===1){return processVNode(vnodes[0]);} else if(vnodes.length > 1){return createElement('div',{className:'minima-fragment'},...vnodes.map(processVNode));} else {return null;}};const loadTemplate=async(url)=> {if(!isValidUrl(url))throw new Error('Invalid template URL');const response=await fetch(url);const text=await response.text();return html([text]);};export {html,loadTemplate,sanitizeText};